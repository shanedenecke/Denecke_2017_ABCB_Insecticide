"LCL"=10^LCL,
"UCL"=10^UCL,
"slope"=slope,
"slopeSE"=slopeSE,
"intercept"=intercept,
"interceptSE"=interceptSE,
"z.value"=z.value,
"chisquare"=deviance(mod),
"df"=df.residual(mod),
"h"=het,
"g"=g,
"theta.hat"=theta.hat,
"var.theta.hat"=var.theta.hat)
wxac.values <- list(mod,het,summary,intercept,interceptSE,slope,slopeSE,z.value,N,b0,b1,vcov,var.b0,var.b1,var.b0.b1,alpha,g,eta,theta.hat,const1,const2a,const2,LCL,UCL,var.theta.hat,ECtable[50,])
wxac.values <- list(mod,het,summary,intercept,interceptSE,slope,slopeSE,z.value,N,b0,b1,vcov,var.b0,var.b1,cov.b0.b1,alpha,g,eta,theta.hat,const1,const2a,const2,LCL,UCL,var.theta.hat,ECtable[50,])
wxac.values
r <- a$Dead
n <- a$Total
d <- a$Dose
conf.level=.95
############################################
### LD function (copy and paste into R console)
###########################################
#LD <- function(r, n, d, conf.level) {
## Set up a number series
p <- seq(1, 99, 1)
d <- d+1
## r=number responding, n=number treated, d=dose (untransformed), confidence interval level,
mod <- glm(cbind(r, (n-r)) ~ log10(d), family = binomial(link=probit))
### Calculate heterogeneity correction to confidence intervals according to Finney, 1971, (p.
### 72, eq. 4.27; also called "h")
het = deviance(mod)/df.residual(mod)
if(het < 1){het = 1} ### Heterogeneity cannot be less than 1
## Extract slope and intercept
summary <- summary(mod, dispersion=het, cor = F)
intercept <- summary$coefficients[1]
interceptSE <- summary$coefficients[3]
slope <- summary$coefficients[2]
slopeSE <- summary$coefficients[4]
z.value <- summary$coefficients[6]
N <- sum(n)
## Intercept (alpha)
b0<-intercept
## Slope (beta)
b1<-slope
## Slope variance
vcov = summary(mod)$cov.unscaled
var.b0<-vcov[1,1]
## Intercept variance
var.b1<-vcov[2,2]
## Slope intercept covariance
cov.b0.b1<-vcov[1,2]
## Adjust alpha depending on heterogeneity (Finney, 1971, p. 76)
alpha<-1-conf.level
if(het > 1) {talpha <- -qt(alpha/2, df=df.residual(mod))} else {talpha <- -qnorm(alpha/2)}
## Calculate g (Finney, 1971, p 78, eq. 4.36)
## "With almost all good sets of data, g will be substantially smaller than 1.0 and
## seldom greater than 0.4."
g <- het * ((talpha^2 * var.b1)/b1^2)
## Calculate theta.hat for all LD levels based on probits in eta (Robertson et al., 2007, pg.
## 27; or "m" in Finney, 1971, p. 78)
eta = family(mod)$linkfun(p/100)  #probit distribution curve
theta.hat <- (eta - b0)/b1
## Calculate correction of fiducial limits according to Fieller method (Finney, 1971,
## p. 78-79. eq. 4.35)
const1 <- (g/(1-g))*(theta.hat + cov.b0.b1/var.b1) # const1 <- (g/(1-g))*(theta.hat -   cov.b0.b1/var.b1)
const2a <- var.b0 + 2*cov.b0.b1*theta.hat + var.b1*theta.hat^2 - g*(var.b0 - (cov.b0.b1^2/var.b1))
const2 <- talpha/((1-g)*b1) * sqrt(het * (const2a))
## Calculate the confidence intervals LCL=lower, UCL=upper (Finney, 1971, p. 78-79. eq. 4.35)
LCL <- (theta.hat + const1 - const2)
UCL <- (theta.hat + const1 + const2)
## Calculate variance for theta.hat (Robertson et al., 2007, pg. 27)
var.theta.hat <- (1/(theta.hat^2)) * ( var.b0 + 2*cov.b0.b1*theta.hat + var.b1*theta.hat^2 )
## Make a data frame from the data at all the different values
ECtable <- data.frame(
"p"=p,
"N"=N,
"EC"=10^theta.hat,
"LCL"=10^LCL,
"UCL"=10^UCL,
"slope"=slope,
"slopeSE"=slopeSE,
"intercept"=intercept,
"interceptSE"=interceptSE,
"z.value"=z.value,
"chisquare"=deviance(mod),
"df"=df.residual(mod),
"h"=het,
"g"=g,
"theta.hat"=theta.hat,
"var.theta.hat"=var.theta.hat)
wxac.values.dose.adjust <-  list(mod,het,summary,intercept,interceptSE,slope,slopeSE,z.value,N,b0,b1,vcov,var.b0,var.b1,cov.b0.b1,alpha,g,eta,theta.hat,const1,const2a,const2,LCL,UCL,var.theta.hat,ECtable[50,])
wxac.values.dose.adjust
View(wxac.values)
View(wxac.values[2)
View(wxac.values[2])
View(wxac.values.dose.adjust[2])
View(wxac.values[4:17])
View(wxac.values.dose.adjust[4:17])
wxac.values
wxac.values[4:17]
wxac.values.dose.adjust[4:17]
wxac.values==wxac.values.dose.adjust
i=1
wxac.values[i]==wxac.values.dose.adjust[i]
wxac.values[[i]]==wxac.values.dose.adjust[[i]]
wxac.values[[i]]
wxac.values.dose.adjust[[i]]
wxac.values.dose.adjust
wxac.values
r <- a$Dead
n <- a$Total
d <- a$Dose
conf.level=.95
############################################
### LD function (copy and paste into R console)
###########################################
#LD <- function(r, n, d, conf.level) {
## Set up a number series
p <- seq(1, 99, 1)
#d <- d+1
## r=number responding, n=number treated, d=dose (untransformed), confidence interval level,
mod <- glm(cbind(r, (n-r)) ~ log10(d), family = binomial(link=probit))
### Calculate heterogeneity correction to confidence intervals according to Finney, 1971, (p.
### 72, eq. 4.27; also called "h")
het = deviance(mod)/df.residual(mod)
if(het < 1){het = 1} ### Heterogeneity cannot be less than 1
## Extract slope and intercept
summary <- summary(mod, dispersion=het, cor = F)
intercept <- summary$coefficients[1]
interceptSE <- summary$coefficients[3]
slope <- summary$coefficients[2]
slopeSE <- summary$coefficients[4]
z.value <- summary$coefficients[6]
N <- sum(n)
## Intercept (alpha)
b0<-intercept
## Slope (beta)
b1<-slope
## Slope variance
vcov = summary(mod)$cov.unscaled
var.b0<-vcov[1,1]
## Intercept variance
var.b1<-vcov[2,2]
## Slope intercept covariance
cov.b0.b1<-vcov[1,2]
## Adjust alpha depending on heterogeneity (Finney, 1971, p. 76)
alpha<-1-conf.level
if(het > 1) {talpha <- -qt(alpha/2, df=df.residual(mod))} else {talpha <- -qnorm(alpha/2)}
## Calculate g (Finney, 1971, p 78, eq. 4.36)
## "With almost all good sets of data, g will be substantially smaller than 1.0 and
## seldom greater than 0.4."
g <- het * ((talpha^2 * var.b1)/b1^2)
## Calculate theta.hat for all LD levels based on probits in eta (Robertson et al., 2007, pg.
## 27; or "m" in Finney, 1971, p. 78)
eta = family(mod)$linkfun(p/100)  #probit distribution curve
theta.hat <- (eta - b0)/b1
## Calculate correction of fiducial limits according to Fieller method (Finney, 1971,
## p. 78-79. eq. 4.35)
const1 <- (g/(1-g))*(theta.hat + cov.b0.b1/var.b1) # const1 <- (g/(1-g))*(theta.hat -   cov.b0.b1/var.b1)
const2a <- var.b0 + 2*cov.b0.b1*theta.hat + var.b1*theta.hat^2 - g*(var.b0 - (cov.b0.b1^2/var.b1))
const2 <- talpha/((1-g)*b1) * sqrt(het * (const2a))
## Calculate the confidence intervals LCL=lower, UCL=upper (Finney, 1971, p. 78-79. eq. 4.35)
LCL <- (theta.hat + const1 - const2)
UCL <- (theta.hat + const1 + const2)
## Calculate variance for theta.hat (Robertson et al., 2007, pg. 27)
var.theta.hat <- (1/(theta.hat^2)) * ( var.b0 + 2*cov.b0.b1*theta.hat + var.b1*theta.hat^2 )
## Make a data frame from the data at all the different values
ECtable <- data.frame(
"p"=p,
"N"=N,
"EC"=10^theta.hat,
"LCL"=10^LCL,
"UCL"=10^UCL,
"slope"=slope,
"slopeSE"=slopeSE,
"intercept"=intercept,
"interceptSE"=interceptSE,
"z.value"=z.value,
"chisquare"=deviance(mod),
"df"=df.residual(mod),
"h"=het,
"g"=g,
"theta.hat"=theta.hat,
"var.theta.hat"=var.theta.hat)
wxac.values <- list(mod,het,summary,intercept,interceptSE,slope,slopeSE,z.value,N,b0,b1,vcov,var.b0,var.b1,cov.b0.b1,alpha,g,eta,theta.hat,const1,const2a,const2,LCL,UCL,var.theta.hat,ECtable[50,])
wxac.values
a
d
r <- a$Dead
n <- a$Total
d <- a$Dose
conf.level=.95
############################################
### LD function (copy and paste into R console)
###########################################
#LD <- function(r, n, d, conf.level) {
## Set up a number series
p <- seq(1, 99, 1)
d <- d+1
## r=number responding, n=number treated, d=dose (untransformed), confidence interval level,
mod <- glm(cbind(r, (n-r)) ~ log10(d), family = binomial(link=probit))
### Calculate heterogeneity correction to confidence intervals according to Finney, 1971, (p.
### 72, eq. 4.27; also called "h")
het = deviance(mod)/df.residual(mod)
if(het < 1){het = 1} ### Heterogeneity cannot be less than 1
## Extract slope and intercept
summary <- summary(mod, dispersion=het, cor = F)
intercept <- summary$coefficients[1]
interceptSE <- summary$coefficients[3]
slope <- summary$coefficients[2]
slopeSE <- summary$coefficients[4]
z.value <- summary$coefficients[6]
N <- sum(n)
## Intercept (alpha)
b0<-intercept
## Slope (beta)
b1<-slope
## Slope variance
vcov = summary(mod)$cov.unscaled
var.b0<-vcov[1,1]
## Intercept variance
var.b1<-vcov[2,2]
## Slope intercept covariance
cov.b0.b1<-vcov[1,2]
## Adjust alpha depending on heterogeneity (Finney, 1971, p. 76)
alpha<-1-conf.level
if(het > 1) {talpha <- -qt(alpha/2, df=df.residual(mod))} else {talpha <- -qnorm(alpha/2)}
## Calculate g (Finney, 1971, p 78, eq. 4.36)
## "With almost all good sets of data, g will be substantially smaller than 1.0 and
## seldom greater than 0.4."
g <- het * ((talpha^2 * var.b1)/b1^2)
## Calculate theta.hat for all LD levels based on probits in eta (Robertson et al., 2007, pg.
## 27; or "m" in Finney, 1971, p. 78)
eta = family(mod)$linkfun(p/100)  #probit distribution curve
theta.hat <- (eta - b0)/b1
## Calculate correction of fiducial limits according to Fieller method (Finney, 1971,
## p. 78-79. eq. 4.35)
const1 <- (g/(1-g))*(theta.hat + cov.b0.b1/var.b1) # const1 <- (g/(1-g))*(theta.hat -   cov.b0.b1/var.b1)
const2a <- var.b0 + 2*cov.b0.b1*theta.hat + var.b1*theta.hat^2 - g*(var.b0 - (cov.b0.b1^2/var.b1))
const2 <- talpha/((1-g)*b1) * sqrt(het * (const2a))
## Calculate the confidence intervals LCL=lower, UCL=upper (Finney, 1971, p. 78-79. eq. 4.35)
LCL <- (theta.hat + const1 - const2)
UCL <- (theta.hat + const1 + const2)
## Calculate variance for theta.hat (Robertson et al., 2007, pg. 27)
var.theta.hat <- (1/(theta.hat^2)) * ( var.b0 + 2*cov.b0.b1*theta.hat + var.b1*theta.hat^2 )
## Make a data frame from the data at all the different values
ECtable <- data.frame(
"p"=p,
"N"=N,
"EC"=10^theta.hat,
"LCL"=10^LCL,
"UCL"=10^UCL,
"slope"=slope,
"slopeSE"=slopeSE,
"intercept"=intercept,
"interceptSE"=interceptSE,
"z.value"=z.value,
"chisquare"=deviance(mod),
"df"=df.residual(mod),
"h"=het,
"g"=g,
"theta.hat"=theta.hat,
"var.theta.hat"=var.theta.hat)
wxac.values.dose.adjust <- list(mod,het,summary,intercept,interceptSE,slope,slopeSE,z.value,N,b0,b1,vcov,var.b0,var.b1,cov.b0.b1,alpha,g,eta,theta.hat,const1,const2a,const2,LCL,UCL,var.theta.hat,ECtable[50,])
wxac.values.dose.adjust
log(.6,base=2)
2^1.5
73
78.5
91.7
81.7
92.5
78.2
98.2
78
92.5
59.4
82.2
75
79
79
89
95
72
87
73
92
83
61
90
a <- c(73,78.5,
91.7,
81.7,
92.5,
78.2,
98.2,
78,
92.5,
59.4,
82.2,
75,
79,
79,
89,
95,
72,
87,
73,
92,
83,
61,
90,
)
a <- c(73,78.5,
91.7,
81.7,
92.5,
78.2,
98.2,
78,
92.5,
59.4,
82.2,
75,
79,
79,
89,
95,
72,
87,
73,
92,
83,
61,
90,
)
a <- c(73,78.5,91.7,81.7,92.5,78.2,98.2,78,92.5,59.4,82.2,75,79,79,89,95,72,87,73,92,83,61,90)
a
hist(a)
table(a>80)
table(a>90)
table(a>70)
knitr::opts_chunk$set(echo = TRUE,warning=F,message=F)
dir.create("~/test_ABCB")
knitr::opts_knit$set(root.dir = "~/test_ABCB")
with(mtcars,plot(mpg~wt))
installed.packages
installed.packages()
"insect.toxicology" %in% installed.packages()
list.of.packages <- c("devtools","plotrix")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
if(!"insect.toxicology" %in% installed.packages) devtools::install_github("shanedenecke/insect.toxicology")
!"insect.toxicology" %in% installed.packages
if(!"insect.toxicology" %in% installed.packages()) devtools::install_github("shanedenecke/insect.toxicology")
download.file("https://data.mendeley.com/archiver/92sx2h3kfs?version=1",destfile="~/Denecke_ABCB.zip")
download.file("https://data.mendeley.com/datasets/92sx2h3kfs/1/files/10fd8799-4c51-4efc-98a4-80a438102d30/Fig2_Mdr65KO_Lc50.csv?dl=1",destfile="~/Denecke_ABCB.zip")
?download.file
download.file("https://data.mendeley.com/datasets/92sx2h3kfs/1/files/10fd8799-4c51-4efc-98a4-80a438102d30/Fig2_Mdr65KO_Lc50.csv?dl=1",destfile="~/Denecke_ABCB.zip",method="Curl")
download.file("https://data.mendeley.com/datasets/92sx2h3kfs/1/files/10fd8799-4c51-4efc-98a4-80a438102d30/Fig2_Mdr65KO_Lc50.csv?dl=1",destfile="~/Denecke_ABCB.zip",method="curl")
download.file("https://data.mendeley.com/datasets/92sx2h3kfs/1/files/10fd8799-4c51-4efc-98a4-80a438102d30/Fig2_Mdr65KO_Lc50.csv?dl=1",destfile="~/test_ABCB/Denecke_ABCB.zip",method="curl")
download.file("https://data.mendeley.com/datasets/92sx2h3kfs/1/files/10fd8799-4c51-4efc-98a4-80a438102d30/Fig2_Mdr65KO_Lc50.csv?dl=1",destfile="~/test_ABCB/Denecke_ABCB.zip",method="curl",quiet = T)
?intersect
a <- c(1:10)
b <- 3:13
c <- 6:16
a
b
c
intersect(a,b,c)
intersect(a,b)
intersect(intersect(a,b),c)
mtcars
head(mtcars)
mtcars[c(1,2,3),]
mtcars[c(1,2,3),c("mpg","cyl")]
mtcars[c(1,2,3),which(colnames(mtcars)=="mpg")]
#### Total R script ABC Transporter Paper
library(insect.toxicology)
library(plotrix)
setwd("/home/sdenecke/Dropbox/PhD_Research/Research_Projects_Ongoing/Mdr65_Paper/Results/Total/")
abcb.combined <-read.csv("Fig1_ABCB_Combined.csv")
setwd("/home/sdenecke/Dropbox/PhD_Research/Research_Projects_Ongoing/Mdr65_Paper/Results/Total/")
abcb.combined <-read.csv("Fig1_ABCB_Combined.csv")
setwd("/home/sdenecke/Dropbox/PhD_Research/Research_Projects_Ongoing/Mdr65_Paper/Results/Total/Raw_Data/")
abcb.combined <-read.csv("Fig1_ABCB_Combined.csv")
example.toxicology.data
dmc.control.add(example.toxicology.data)
head(example.toxicology.data)
read.csv("/home/sdenecke/Downloads/Toxicology.csv")
a <- read.csv("/home/sdenecke/Downloads/Toxicology.csv")
head(a)
head(example.toxicology.data)
dmc.control.add(a)
dmc.control.add
raw.data <- a
key = NULL
new.key = F
solvent.overide = NA
if (new.key == T) {
insecticide.key <- key
}
else {
key <- list(c(insecticide = "imidacloprid", solvent = "h20"),
c(insecticide = "spinosad", solvent = "h20"), c(insecticide = "nicotine",
solvent = "h20"), c(insecticide = "malathion",
solvent = "h20"), c(insecticide = "imi-5-oh",
solvent = "dmso"), c(insecticide = "imi-olefin",
solvent = "dmso"), c(insecticide = "clothianidin",
solvent = "dmso"), c(insecticide = "acetamiprid",
solvent = "dmso"), c(insecticide = "lufenuron",
solvent = "dmso"), c(insecticide = "sulfoxaflor",
solvent = "dmso"), c(insecticide = "permethrin",
solvent = "dmso"), c(insecticide = "pyripole",
solvent = "ethanol"), c(insecticide = "nitenpyram",
solvent = "h20"), c(insecticide = "chlorantraniliprole",
solvent = "h20"), c(insecticide = "ivermectin",
solvent = "dmso"), c(insecticide = "abamectin",
solvent = "dmso"), c(insecticide = "mix", solvent = "dmso"),
c(insecticide = "ethanol", solvent = "ethanol"),
c(insecticide = "dmso", solvent = "dmso"), c(insecticide = "h20",
solvent = "h20"))
}
names(key) <- sapply(key, function(x) x[1])
colnames(raw.data) <- tolower(colnames(raw.data))
raw.data$genotype <- tolower(raw.data$genotype)
raw.data$pesticide <- tolower(raw.data$pesticide)
raw.data$pesticide <- gsub(" ", "", raw.data$pesticide)
index <- unique(select(raw.data, pesticide, genotype))
clean.data.list <- vector("list", nrow(index))
clean.data.list
clean.data.list <- vector("list", nrow(index))
for (i in 1:nrow(index)) {
p <- index[i, 1]
sub.data <- subset(raw.data, pesticide == p)
control.chemical <- key[[which(names(key) == p)]][2]
if (is.na(solvent.overide)) {
control.data <- subset(raw.data, pesticide == control.chemical)
}
else if (!is.na(solvent.overide)) {
control.data <- subset(raw.data, pesticide == solvent.overide)
}
control.data$pesticide = sub.data$pesticide[1]
clean.data.list[[paste(p, sep = "_")]] <- rbind(sub.data,
control.data)
if (p == control.chemical)
clean.data.list[[paste(p, sep = "_")]] <- sub.data
}
i
index
p <- index[i, 1]
sub.data <- subset(raw.data, pesticide == p)
control.chemical <- key[[which(names(key) == p)]][2]
names(key)
p
head(example.toxicology.data)
O
dmc.control.add <- function(raw.data,key=NULL,new.key=F,solvent.overide=NA){
## Determine if a new key is to be accepted
if(new.key==T){
insecticide.key <- key
}else{
key <- list(c(insecticide="imidacloprid",solvent="h2o"),
c(insecticide="spinosad",solvent="h2o"),
c(insecticide="nicotine",solvent="h2o"),
c(insecticide="malathion",solvent="h2o"),
c(insecticide="imi-5-oh",solvent="dmso"),
c(insecticide="imi-olefin",solvent="dmso"),
c(insecticide="clothianidin",solvent="dmso"),
c(insecticide="acetamiprid",solvent="dmso"),
c(insecticide="lufenuron",solvent="dmso"),
c(insecticide="sulfoxaflor",solvent="dmso"),
c(insecticide="permethrin",solvent="dmso"),
c(insecticide="pyripole",solvent="ethanol"),
c(insecticide="nitenpyram",solvent="h2o"),
c(insecticide="chlorantraniliprole",solvent="h2o"),
c(insecticide="ivermectin",solvent="dmso"),
c(insecticide="abamectin",solvent="dmso"),
c(insecticide="mix",solvent="dmso"),
c(insecticide="ethanol",solvent="ethanol"),
c(insecticide="dmso",solvent="dmso"),
c(insecticide="h2o",solvent="h2o"))
}
names(key) <- sapply(key,function(x) x[1])
### Modify data frame
colnames(raw.data) <- tolower(colnames(raw.data))
raw.data$genotype <- tolower(raw.data$genotype)
raw.data$pesticide <- tolower(raw.data$pesticide)
raw.data$pesticide <- gsub(" ","",raw.data$pesticide)
## Add control doses for each pesticide and genotpe
index <- unique(select(raw.data,pesticide,genotype))
clean.data.list <- vector('list',nrow(index))
for(i in 1:nrow(index)){
p <- index[i,1]
#g <- index[i,2]
sub.data <- subset(raw.data,pesticide==p)
control.chemical <- key[[which(names(key)==p)]][2]
if(is.na(solvent.overide)){
control.data <- subset(raw.data,pesticide==control.chemical)
}else if(!is.na(solvent.overide)){
control.data <- subset(raw.data,pesticide==solvent.overide)
}
control.data$pesticide=sub.data$pesticide[1]
clean.data.list[[paste(p,sep="_")]] <- rbind(sub.data,control.data)
if (p==control.chemical) clean.data.list[[paste(p,sep="_")]] <- sub.data
}
return(rbindlist(clean.data.list,use.names=T))
}
dmc.control.add(a)
dmc.control.add(a) %>% abbots.correction.plot(control="urateoxidaseg4-uas-null")
dmc.control.add(a) %>% abbots.correction.plot(control="urateoxidaseg4-uas-null",write=F)
